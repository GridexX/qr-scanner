name: Build and Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: qr-tracker-backend
  FRONTEND_IMAGE_NAME: qr-tracker-frontend

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      with:
        path: backend

    - name: Set up Go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00
      with:
        go-version: '1.25'
        cache-dependency-path: backend/go.sum

    - name: Cache Go modules
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: |
        cd backend
        go mod download
        go mod verify

    - name: Run tests
      run: |
        cd backend
        go test -v ./...

    - name: Run go vet
      run: |
        cd backend
        go vet ./...

    - name: Build backend
      run: |
        cd backend
        go build -v ./...

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      # Only checkout the frontend directory to save time and space
      with:
        path: frontend

    - name: Set up Node.js
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      run: |
        cd frontend
        npm run lint --if-present

    # - name: Run tests
    #   run: |
    #     cd frontend
    #     npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  build-and-push-backend:
    strategy:
      matrix:
        image: [ front, latest ]
    needs: test-backend
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

    - name: Log in to Docker Hub
      uses: docker/login-action@263435318d21b8e681c14492fe198d362a7d2c83
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  build-and-push-frontend:
    needs: test-frontend
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

    - name: Log in to Docker Hub
      uses: docker/login-action@263435318d21b8e681c14492fe198d362a7d2c83
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: [build-and-push-backend, build-and-push-frontend]

    steps:
    - name: Run Trivy vulnerability scanner for backend
      uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
      with:
        image-ref: '${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Upload Trivy scan results for backend
      uses: github/codeql-action/upload-sarif@86b04fb0e47484f7282357688f21d5d0e32175fe
      if: always()
      with:
        sarif_file: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner for frontend
      uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
      with:
        image-ref: '${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload Trivy scan results for frontend
      uses: github/codeql-action/upload-sarif@86b04fb0e47484f7282357688f21d5d0e32175fe
      if: always()
      with:
        sarif_file: 'frontend-trivy-results.sarif'

  deploy-notification:
    runs-on: ubuntu-latest
    needs: [build-and-push-backend, build-and-push-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Deployment Success Notification
      run: |
        echo "ðŸš€ Successfully built and pushed Docker images to Docker Hub!"
        echo "Backend: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest"
        echo "Frontend: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest"
        echo ""
        echo "To deploy, update your docker-compose.yml:"
        echo "  backend:"
        echo "    image: ${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest"
        echo "  frontend:"
        echo "    image: ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest"
