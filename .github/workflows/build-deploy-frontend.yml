name: Build and Deploy frontend

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  FRONTEND_URL: ${secrets.FRONTEND_URL}

permissions:
  contents: read
  id-token: write
  security-events: write


jobs:
  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

    - name: Set up Node.js
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444
      with:
        node-version: '23'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      run: |
        cd frontend
        npm run lint --if-present

    # - name: Run tests
    #   run: |
    #     cd frontend
    #     npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: frontend-build
        path: frontend/build/


  build-and-push-frontend:
    needs: test-frontend
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

    - name: Log in to Docker Hub
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BACKEND_URL=${{ secrets.BACKEND_URL }}
          GTM_ID=${{ secrets.GTM_ID }}

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: [build-and-push-backend, build-and-push-frontend]

    steps:
    - name: Run Trivy vulnerability scanner for frontend
      uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
      with:
        image-ref: '${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'
        skip-setup-trivy: true

    - name: Upload Trivy scan results for frontend
      uses: github/codeql-action/upload-sarif@86b04fb0e47484f7282357688f21d5d0e32175fe
      if: always()
      with:
        sarif_file: 'frontend-trivy-results.sarif'
